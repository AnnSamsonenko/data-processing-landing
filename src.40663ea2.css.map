{"version":3,"sources":["sass/utils/_variables.scss","sass/base/_body.scss","sass/base/_common.scss","sass/components/_container.scss","sass/layout/_header.scss","sass/utils/_mixins.scss"],"names":[],"mappings":"AAAA,MAEE,oBAAA,CACA,uBAAA,CACA,0BAAA,CACA,8BAAA,CACA,yBAAA,CACA,sBAAA,CACA,0BAAA,CACA,8BAAA,CACA,8BAAA,CACA,iCAAA,CACA,6CAAA,CACA,6BAAA,CACA,8EAAA,CAGA,iEAAA,CACA,6EAAA,CACA,gEAAA,CAEA,8BAAA,CACA,+BAAA,CACA,wCAAA,CACA,6CCxBF,KACE,4BAAA,CACA,uBAAA,CACA,2CAAA,CACA,4BCSF,0BALE,YAAA,CACA,gBAIF,MAIE,cAAA,CACA,gBAIF,EACE,oBAAA,CACA,cAIF,IACE,aAAA,CACA,cAAA,CACA,YAIF,QACE,kBAIF,OACE,SAAA,CACA,WAAA,CACA,4BAAA,CACA,eC5CF,WACE,cAAA,CACA,cCFF,QACE,oBAGF,mBACE,YAAA,CACA,kBAAA,CACA,6BAAA,CACA,aAGF,MACE,kBAGF,KCgCE,cAF2D,CAG3D,kBAH8C,CAI9C,uBDhCA,gBC6BA,aD1BA,4BACE,kBAIJ,WACE,iBAAA,CCWA,eDVoB,CCWpB,gBAAA,CDVA,cAAA,CACA,gBAAA,CACA,kBAAA,CACA,wBAAA,CACA,8BAEA,kBACE,UAAA,CACA,iBAAA,CACA,WAAA,CACA,OAAA,CACA,OAAA,CACA,UAAA,CACA,wCAAA,CACA,uBAEF,wBACE,UAAA,CACA","file":"src.40663ea2.css","sourceRoot":"../src","sourcesContent":[":root {\n  // Color\n  --text-color: #8476aa;\n  --text-white-color: #ffffff;\n  --title-text-color: #99efd0;\n  --paragraph-text-color: #6d6d78;\n  --card-text-color: #212b36;\n  --accent-color: #f2994a;\n  --header-nav-color: #b5b5b5;\n  --decor-arrow-bg-color: #13c296;\n  --decor-chart-bg-color: #1d2067;\n  --card-residense-bg-color: #516ea9;\n  --input-socials-bg-color: rgba(246, 246, 246, 0.1);\n  --footer-policy-color: #8d8d8d;\n  --page-bg-first-color: linear-gradient(222.26deg, #3b1d60 1.22%, #040d3e 106.28%);\n\n  // Shadow\n  --btn-box-shadow: -11.09px 18.13px 36.6483px rgba(242, 153, 74, 0.13);\n  --decor-arrow-box-shadow: -16.0895px 24.1342px 36.6483px rgba(19, 194, 150, 0.24);\n  --card-residense-box-shadow: -8px 16px 60px rgba(82, 114, 139, 0.24);\n  // Fonts\n  --main-font: 'Rubik', sans-serif;\n  --title-font: 'Inter', sans-serif;\n  --card-main-font: 'Montserrat', sans-serif;\n  --card-secondary-font: 'Open Sans', sans-serif;\n}\n","body {\n  font-family: var(--main-font);\n  color: var(--text-color);\n  background-image: var(--page-bg-first-color);\n  background-repeat: no-repeat;\n}\n","// Title\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n// List\nul,\nol {\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 0;\n  list-style: none;\n}\n\n// Link\na {\n  text-decoration: none;\n  color: inherit;\n}\n\n// Image\nimg {\n  display: block;\n  max-width: 100%;\n  height: auto;\n}\n\n// Address\naddress {\n  font-style: normal;\n}\n\n// Button\nbutton {\n  padding: 0;\n  border: none;\n  background-color: transparent;\n  cursor: pointer;\n}\n",".container {\n  padding: 0 15px;\n  margin: 0 auto;\n}\n",".header {\n  padding: 79px 0 52px 0px;\n}\n\n.header__container {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 1130px;\n}\n\n.logo {\n  margin-right: 44px;\n}\n\n.nav {\n  @include flex-center;\n  &__list {\n    display: flex;\n  }\n  &__item:not(:last-child) {\n    margin-right: 16px;\n  }\n}\n\n.nav__link {\n  position: relative;\n  @include font(12px, 500, 20px);\n  font-size: 12px;\n  line-height: 20px;\n  letter-spacing: 2px;\n  text-transform: uppercase;\n  color: var(--header-nav-color);\n\n  &::before {\n    content: '';\n    position: absolute;\n    bottom: -4px;\n    right: 0;\n    width: 0%;\n    height: 1px;\n    background-color: var(--header-nav-color);\n    transition: 250ms linear;\n  }\n  &:hover::before {\n    width: 100%;\n    left: 0;\n  }\n}\n","@function decimal-round($number, $digits: 0, $mode: round) {\n  $n: 1;\n  // $number must be a number\n  @if type-of($number) != number {\n    @warn '#{ $number } is not a number.';\n    @return $number;\n  }\n  // $digits must be a unitless number\n  @if type-of($digits) != number {\n    @warn '#{ $digits } is not a number.';\n    @return $number;\n  } @else if not unitless($digits) {\n    @warn '#{ $digits } has a unit.';\n    @return $number;\n  }\n  @if $digits > 0 {\n    @for $i from 1 through $digits {\n      $n: $n * 10;\n    }\n  }\n  @if $mode == round {\n    @return round($number * $n) / $n;\n  } @else if $mode == ceil {\n    @return ceil($number * $n) / $n;\n  } @else if $mode == floor {\n    @return floor($number * $n) / $n;\n  } @else {\n    @warn '#{ $mode } is undefined keyword.';\n    @return $number;\n  }\n}\n\n// font-size: 18px;\n// font-weight: 400;\n// line-height: 1.33;\n@mixin font($fs: 16px, $fw: 400, $lh: 26px) {\n  font-size: $fs;\n  font-weight: $fw;\n  line-height: decimal-round($lh/$fs, 2);\n}\n\n// display: flex;\n// flex-wrap: wrap;\n// align-items: center;\n// justify-content: center;\n@mixin flex-center($df: flex, $jc: center, $al: center, $fw: wrap) {\n  display: $df;\n  flex-wrap: $fw;\n  align-items: $al;\n  justify-content: $jc;\n}\n\n// @media screen and (min-device-pixel-ratio: 2) and (min-width: *width*),\n//     screen and (min-resolution: 192dpi) and (min-width: *width*),\n//     screen and (min-resolution: 2dppx) and (min-width: *width*) {\n//     background-image: url(*image*);\n//   }\n@mixin retina($image, $width) {\n  @media screen and (min-device-pixel-ratio: 2) and (min-width: map-get($min-widths, $width)),\n    screen and (min-resolution: 192dpi) and (min-width: map-get($min-widths, $width)),\n    screen and (min-resolution: 2dppx) and (min-width: map-get($min-widths, $width)) {\n    background-image: url($image);\n  }\n}\n"]}